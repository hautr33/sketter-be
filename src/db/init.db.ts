import sequelizeConnection from './sequelize.db'
// import { ENVIRONMENT } from '../config/default'
import logger from '../utils/logger'
import { City } from '../models/city.model';
import { TimeFrame } from '../models/time_frame.model';
import { Role } from '../models/role.model';
import { Personalities } from '../models/personalities.model';
import { Catalog } from '../models/catalog.model';

/**
 * DB Connection related actions
 */

// const isDev = ENVIRONMENT === 'development'

export default {
    connect(): Promise<void> {
        return sequelizeConnection.sync({ alter: true, logging: false })
            .then(async () => {
                logger.info('DB connection successful')

                //Init city
                const city = [
                    [1, 'ƒê√† L·∫°t']
                ]
                for (let i = 0; i < city.length; i++) {
                    await City.upsert({ id: city[i][0] as number, name: city[i][1] as string })
                }

                //Init timeframe
                for (let i = 1; i <= 12; i++) {
                    const id = i
                    const from = (i - 1) * 2 >= 10 ? (i - 1) * 2 + ':00' : '0' + (i - 1) * 2 + ':00'
                    const to = i * 2 >= 10 ? i * 2 + ':00' : '0' + i * 2 + ':00'
                    await TimeFrame.upsert({ id: id, from: from, to: to })
                }

                //Init role
                const role = [
                    [1, 'Admin', 'Qu·∫£n tr·ªã vi√™n'],
                    [2, 'Manager', 'Qu·∫£n l√Ω'],
                    [3, 'Supplier', 'ƒê·ªëi t√°c'],
                    [4, 'Traveler', 'Kh√°ch du l·ªãch'],
                ]
                for (let i = 0; i < role.length; i++) {
                    await Role.upsert({ id: role[i][0] as number, name: role[i][1] as string, description: role[i][2] as string })
                }

                //Init personality
                const personalities = [
                    "C√≥ nhu c·∫ßu vui ch∆°i, gi·∫£i tr√≠ cao",
                    "ƒêam m√™ v·ªõi ·∫©m th·ª±c",
                    "ƒêam m√™ v·ªõi l·ªãch s·ª≠, vƒÉn h√≥a",
                    "Gi√° r·∫ª l√† tr√™n h·∫øt",
                    "T√¨m ki·∫øm s·ª± th∆∞ gi√£n",
                    "Th√≠ch kh√°m ph√°",
                    "∆Øa m·∫°o hi·ªÉm",
                    "Y√™u thi√™n nhi√™n"
                ]
                for (let i = 0; i < personalities.length; i++) {
                    await Personalities.upsert({ name: personalities[i] })
                }

                //Init catalog
                const catalogs = [
                    ["üçΩ ·∫®m th·ª±c"],
                    ["üè† L∆∞u tr√∫"],
                    ["üé≠ VƒÉn h√≥a"],
                    ["üì∑ Kh√°m ph√°"],
                    ["‚òï Qu√°n n∆∞·ªõc", "üçΩ ·∫®m th·ª±c"],
                    ["üåª V∆∞·ªùn hoa", "üì∑ Kh√°m ph√°"],
                    ["üçú Qu√°n ƒÉn", "üçΩ ·∫®m th·ª±c"],
                    ["üçü ƒÇn v·∫∑t", "üçΩ ·∫®m th·ª±c"],
                    ["üé† ƒê·ªãa ƒëi·ªÉm du l·ªãch", "üì∑ Kh√°m ph√°"],
                    ["üèï C·∫Øm tr·∫°i", "üè† L∆∞u tr√∫"],
                    ["üèù Khu ngh·ªâ d∆∞·ª°ng", "üè† L∆∞u tr√∫"],
                    ["üè° Homestay", "üè† L∆∞u tr√∫"],
                    ["üè® Kh√°ch s·∫°n", "üè† L∆∞u tr√∫"],
                    ["üë®‚Äçüåæ N√¥ng tr·∫°i", "üì∑ Kh√°m ph√°"],
                    ["üìñ L·ªãch s·ª≠", "üé≠ VƒÉn h√≥a"],
                    ["üì∏ ƒê·ªãa ƒëi·ªÉm ng·∫Øm c·∫£nh", "üì∑ Kh√°m ph√°"],
                    ["üîÜ B·∫£n x·ª©", "üé≠ VƒÉn h√≥a"],
                    ["üïå T√≠n ng∆∞·ª°ng", "üé≠ VƒÉn h√≥a"]
                ]
                for (let i = 0; i < catalogs.length; i++) {
                    await Catalog.upsert({ name: catalogs[i][0], parent: catalogs[i][1] ?? null })
                }
            })
            .catch((e) => {
                logger.error('Could not establish db connection\n', e);
                process.exit(1);
            });
    }
}